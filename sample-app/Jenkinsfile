pipeline {
    agent any

    environment { 
        VERSION_SNAPSHOT_REPO_NAME = "thfai2000/version_snapshots"
        VERSION_SNAPSHOT_FOLDER_NAME = "sample-app"
        ENV_CONFIG_GIT_SOURCE = 'https://github.com/thfai2000/sample-app-configuration.git'

    }

    stages {

        stage('Checkout Env Config') {
            steps {
                echo "GIT_BRANCH: ${env.BRANCH_NAME}"
                echo "VERSION_SNAPSHOT_REPO_NAME: $VERSION_SNAPSHOT_REPO_NAME"
                dir('env-config') {

                    checkout([$class: 'GitSCM',
                            branches: [[name: env.BRANCH_NAME]],
                            doGenerateSubmoduleConfigurations: false,
                            extensions: [],
                            submoduleCfg: [],
                            userRemoteConfigs: [[url: ENV_CONFIG_GIT_SOURCE]]])
                    script {
                        folderNames = sh(script: "ls -d */ | xargs -n 1 basename", returnStdout: true).trim().split("\n")
                    }
       
                }
                echo "type: ${folderNames.getClass()}"
                echo "folderNames: ${folderNames}"
                script {
                    def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"

                    def response = httpRequest(url: treeApiUrl, httpMode: 'GET')

                    def files = []
                    if (response.status == 200) {
                        def json = readJSON(text: response.content)
                        files = json.findAll { it.type == 'file' }.collect { it.name }
                    }
                    snapshotVersions = files
                }
                echo "snapshotVersions: $snapshotVersions"
                script {
                    def params = input(message: 'Provide the build information',
                        ok: "Continue",
                        parameters: [
                            choice(name: 'which_env', choices: Arrays.asList(folderNames), description: 'Select the environment'),
                            choice(name: 'selected_version_snapshot', choices: snapshotVersions, description: 'Select the snapshot version')
                        ]
                    )
                    env.which_env = params.which_env
                    env.selected_version_snapshot = params.selected_version_snapshot
                }
                echo "which_env=${env.which_env}"
                echo "selected_version_snapshot=${env.selected_version_snapshot}"
                
            }
        }
        
        stage('Loop through Artifacts') {
            steps {
                script {
                    def hostYamlFiles
                    def artifacts
                    def response = httpRequest(url: getSnapshotUrl(env.selected_version_snapshot))
                    
                    if (response.status == 200) {
                        artifacts = readYaml(text: response.content)
                    } else {
                        error "Failed to retrieve YAML file. HTTP status: ${response.status}"
                    }
                    dir('env-config') {

                        // def targetFolder = sh(script: 'dirname $0', returnStdout: true).trim() + "/${env.which_env}"
                        def targetFolder = env.which_env
                        sh(script: "ls ${targetFolder}")
                        hostYamlFiles = findFiles(glob: "${targetFolder}/hosts/*.yaml")

                        def stageMap = [:]  // Map to store parallel stages
                        for (def artifact in artifacts) {
                            //very important: keep variable of own stage
                            stageMap["Artifact: ${artifact.name}"] = processComponent(artifact, hostYamlFiles)
                        }

                        parallel stageMap
                    }
                
                    
                }
            }
        }
        
    }
}


def processComponent(currentArtifact, hostYamlFiles) {
    return {
                                
        echo currentArtifact.name
        script {

            // def stageMap = [:]  // Map to store parallel stages

            for (def hostYamlFile in hostYamlFiles) {
                def hostYaml = readYaml(file: hostYamlFile.path)
                def hostComponentsYaml = hostYaml.host_components
                

                for (def componentYaml in hostComponentsYaml) {
                    if (componentYaml.name == currentArtifact.name) {
                        echo "Artifact '${currentArtifact.name}' found in Host YAML: ${hostYamlFile.name}"

                        stage{
                            echo "download"
                        }

                        stage {
                            echo "install"
                        }
                        // stageMap["Machine: ${hostYaml.hostname}"] = processComponentOnMachine(currentArtifact, hostYaml, componentYaml)
                        
                    }
                }
            }
            // parallel stageMap
        }

    }
}

// def processComponentOnMachine(currentArtifact, hostYaml, componentYaml ) {
//     return {
//         echo "install machine ${hostYaml.hostname}"
//     }
// }

// def getFolderNames() {
    
//     // def currentDir = sh(script: 'pwd', returnStdout: true).trim()

//     def folderList = sh(script: "ls -d */ | xargs -n 1 basename", returnStdout: true).trim().split('\n')
//     return folderList
    
// }

// def getSnapshotVersions() {
//     def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"
    
//     def response = httpRequest(url: treeApiUrl, httpMode: 'GET', authentication: 'your_credentials')
//     def fileNames = []
//     if (response.status == 200) {
//         def json = readJSON(text: response.content)
//         fileNames = json.findAll { it.type == 'file' }.collect { it.name }
//     }
//     return fileNames
// }

def getSnapshotUrl(version) {
    def snapshotUrl = "https://raw.githubusercontent.com/$VERSION_SNAPSHOT_REPO_NAME/$GIT_BRANCH/$VERSION_SNAPSHOT_FOLDER_NAME/$version"
    return snapshotUrl
}