pipeline {
    agent any

    environment { 
        VERSION_SNAPSHOT_REPO_NAME = "thfai2000/version_snapshots"
        VERSION_SNAPSHOT_FOLDER_NAME = "sample-app"
        ENV_CONFIG_GIT_SOURCE = 'https://github.com/thfai2000/sample-app-configuration.git'
    }

    stages {

        stage('Checkout Env Config') {
            steps {
                script {
                    checkoutEnvConfig()
                }
            }
        }
        stage('Download Deploy Scripts') {
            steps {
                script {
                    downloadDeployScripts()
                }
            }
        }
        
        stage('Deploy Components') {   
            parallel {
                stage ("web1") {
                    steps{
                        script {
                            processComponent("web1")
                        }
                    }
                }
                stage ("web2") {
                    steps{
                        script {
                            processComponent("web2")
                        }
                    }
                }
                stage ("web3") {
                    steps{
                        script {
                            processComponent("web3")
                        }
                    }
                }
            }
            
        }
    }
}

def getSnapshotUrl(version) {
    def snapshotUrl = "https://raw.githubusercontent.com/$VERSION_SNAPSHOT_REPO_NAME/$GIT_BRANCH/$VERSION_SNAPSHOT_FOLDER_NAME/$version"
    return snapshotUrl
}

def checkoutEnvConfig(){
    echo "GIT_BRANCH: ${env.BRANCH_NAME}"
    echo "VERSION_SNAPSHOT_REPO_NAME: $VERSION_SNAPSHOT_REPO_NAME"
    dir('env-config') {
        checkout([$class: 'GitSCM',
                branches: [[name: env.BRANCH_NAME]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[url: ENV_CONFIG_GIT_SOURCE]]])
        script {
            folderNames = sh(script: "ls -d */ | xargs -n 1 basename", returnStdout: true).trim().split("\n")
        }

    }

    echo "type: ${folderNames.getClass()}"
    echo "folderNames: ${folderNames}"
    
    def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"

    def response = httpRequest(url: treeApiUrl, httpMode: 'GET')

    def files = []
    if (response.status == 200) {
        def json = readJSON(text: response.content)
        files = json.findAll { it.type == 'file' }.collect { it.name }
    }
    snapshotVersions = files

    def params = input(message: 'Provide the build information',
        ok: "Continue",
        parameters: [
            choice(name: 'which_env', choices: Arrays.asList(folderNames), description: 'Select the environment'),
            choice(name: 'selected_version_snapshot', choices: snapshotVersions, description: 'Select the snapshot version')
        ]
    )
    env.which_env = params.which_env
    env.selected_version_snapshot = params.selected_version_snapshot
    response = httpRequest(url: getSnapshotUrl(env.selected_version_snapshot))

    if (response.status == 200) {
        env.snapshotContent = response.content
        
    } else {
        error "Failed to retrieve YAML file. HTTP status: ${response.status}"
    }
    echo "which_env=${env.which_env}"
    echo "selected_version_snapshot=${env.selected_version_snapshot}"
}

def downloadDeployScripts() {
    echo "Done"
}

def processComponent(targetComponentName){
    dir('env-config') {
        def artifacts
        artifacts = readYaml(text: env.snapshotContent)
        def hostYamlFiles
        // def targetFolder = sh(script: 'dirname $0', returnStdout: true).trim() + "/${env.which_env}"
        def targetFolder = env.which_env
        sh(script: "ls ${targetFolder}")
        hostYamlFiles = findFiles(glob: "${targetFolder}/hosts/*.yaml")

        def stageMap = [:]  // Map to store parallel stages
        for (def artifact in artifacts) {
            
            if(targetComponentName == artifact.name){

                for (def hostYamlFile in hostYamlFiles) {
                    def hostYaml = readYaml(file: hostYamlFile.path)
                    def hostComponentsYaml = hostYaml.host_components
                    
                    for (def componentYaml in hostComponentsYaml) {
                        if (componentYaml.name == targetComponentName) {
                            echo "Component '${targetComponentName}' found in Host YAML: ${hostYamlFile.name}"
                            stageMap["Host: ${hostYamlFile.name}"] = processComponentOnMachine(artifact, targetComponentName, hostYaml, componentYaml ) 
                        }
                    }
                }
            }
        }

        parallel stageMap
    }
}

def processComponentOnMachine(artifact, componentName, hostYaml, componentYaml) {

    return {
                                
        echo "processComponentOnMachine: ${componentName}"

        stages {
            stage{
                steps {

                    echo "download"
                }
            }

            stage{
                steps {

                    echo "install"
                }
            }
        }

    }
}



// def getFolderNames() {
    
//     // def currentDir = sh(script: 'pwd', returnStdout: true).trim()

//     def folderList = sh(script: "ls -d */ | xargs -n 1 basename", returnStdout: true).trim().split('\n')
//     return folderList
    
// }

// def getSnapshotVersions() {
//     def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"
    
//     def response = httpRequest(url: treeApiUrl, httpMode: 'GET', authentication: 'your_credentials')
//     def fileNames = []
//     if (response.status == 200) {
//         def json = readJSON(text: response.content)
//         fileNames = json.findAll { it.type == 'file' }.collect { it.name }
//     }
//     return fileNames
// }

