
def getSnapshotUrl(version) {
    def snapshotUrl = "https://raw.githubusercontent.com/$VERSION_SNAPSHOT_REPO_NAME/$GIT_BRANCH/$VERSION_SNAPSHOT_FOLDER_NAME/$version"
    return snapshotUrl
}

def checkoutEnvConfig() {
    checkout([$class: 'GitSCM',
                branches: [[name: env.BRANCH_NAME]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[url: ENV_CONFIG_GIT_SOURCE]]])
    script {
        env.envFolderNamesString = sh(script: "ls -d */ | xargs -n 1 basename", returnStdout: true).trim()
    }
}

def selectSnapshotAndEnv(closure){
    echo "GIT_BRANCH: ${env.BRANCH_NAME}"
    echo "VERSION_SNAPSHOT_REPO_NAME: $VERSION_SNAPSHOT_REPO_NAME"
    dir('env-config') {
        checkoutEnvConfig()
    }
    def envFolderNames = env.envFolderNamesString.split("\n")
    echo "type: ${envFolderNames.getClass()}"
    echo "envFolderNames: ${envFolderNames}"
    
    def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"

    def response = httpRequest(url: treeApiUrl, httpMode: 'GET')

    def files = []
    if (response.status == 200) {
        def json = readJSON(text: response.content)
        files = json.findAll { it.type == 'file' }.collect { it.name }
    }
    snapshotVersions = files

    def params = input(message: 'Provide the build information',
        ok: "Continue",
        parameters: [
            choice(name: 'which_env', choices: Arrays.asList(envFolderNames), description: 'Select the environment'),
            choice(name: 'selected_version_snapshot', choices: snapshotVersions, description: 'Select the snapshot version')
        ]
    )
    if(closure){
        closure()
    }

    env.which_env = params.which_env
    env.selected_version_snapshot = params.selected_version_snapshot
    response = httpRequest(url: getSnapshotUrl(env.selected_version_snapshot))

    if (response.status == 200) {
        env.snapshotContent = response.content
        
    } else {
        error "Failed to retrieve YAML file. HTTP status: ${response.status}"
    }
    echo "which_env=${env.which_env}"
    echo "selected_version_snapshot=${env.selected_version_snapshot}"
}

def prepareComponent(targetComponentName, closure) {
    dir('env-config') {
        checkoutEnvConfig()
        def componentSnapshots = readYaml(text: env.snapshotContent)
        // def targetFolder = sh(script: 'dirname $0', returnStdout: true).trim() + "/${env.which_env}"
        def targetFolder = env.which_env
        sh(script: "ls ${targetFolder}")
        def hostYamlFiles = findFiles(glob: "${targetFolder}/hosts/*.yaml")

        for (def componentSnapshot in componentSnapshots) {
            
            if(targetComponentName == componentSnapshot.name){

                for (def hostYamlFile in hostYamlFiles) {
                    def hostYaml = readYaml(file: hostYamlFile.path)
                    def hostComponentsYaml = hostYaml.host_components
                    
                    for (def componentYaml in hostComponentsYaml) {
                        if (componentYaml.name == targetComponentName) {
                            if(closure){
                                closure(targetComponentName, componentSnapshot, hostYaml, componentYaml)
                            }
                        }
                    }
                }
            }
        }
    }
}

def downloadComponent( componentName, closure) {
    prepareComponent(componentName) { targetComponentName, componentSnapshot, hostYaml, componentYaml ->
        echo "Download Component '${targetComponentName}'(version=${componentSnapshot.version}) on Host '${hostYaml.hostname}'"
        if(closure){
            closure()
        }
    }
}

def installComponent( componentName, closure) {
    prepareComponent(componentName) { targetComponentName, componentSnapshot, hostYaml, componentYaml ->

        echo "Install Component '${targetComponentName}'(version=${componentSnapshot.version}) on Host '${hostYaml.hostname}'"
        if(closure){
            closure()
        }
    }
}


pipeline {
    agent any

    environment { 
        VERSION_SNAPSHOT_REPO_NAME = "thfai2000/version_snapshots"
        VERSION_SNAPSHOT_FOLDER_NAME = "sample-app"
        ENV_CONFIG_GIT_SOURCE = 'https://github.com/thfai2000/sample-app-configuration.git'
    }

    stages {

        stage('Select Snapshot and Environment') {
            steps {
                selectSnapshotAndEnv {
                }
            }
        }
        stage('Download Deploy Scripts') {
            steps {
                downloadComponent("deploy") {
                    echo "completed download deploy scripts"
                }
            }
        }
        
        stage('Deploy Components') {
            parallel {
                stage ("web1") {
                    stages {
                        stage('download') {
                            steps {
                                downloadComponent("web1") {
                                    echo "completed download web1"
                                }
                            }
                        }
                        stage('install') {
                            steps {
                                installComponent("web1") {
                                    echo "completed install web1"
                                }
                            }
                        }
                    }
                }
                stage ("web2") {
                    stages {
                        stage('download') {
                            steps {
                                downloadComponent("web2") {
                                    echo "completed download web2"
                                }
                                
                            }
                        }
                        stage('install') {
                            steps {
                                installComponent("web2") {
                                    echo "completed install web2"
                                }
                            
                            }
                        }
                    }
                }
                stage ("web3") {
                    stages {
                        stage('download') {
                            steps {
                                downloadComponent("web3") {
                                    echo "completed download web3"
                                }
                            
                            }
                        }
                        stage('install') {
                            steps {
                                installComponent("web3") {
                                    echo "completed install web3"
                                }
                            
                            }
                        }
                    }
                }
            }
            
        }
    }
}




// def processComponentOnMachine(componentName, componentSnapshot, hostYaml, componentYaml) {

//     return {
//         echo "Host: ${hostYaml.hostname}"                        
//         echo "processComponentOnMachine: ${componentName}"
//         echo "download version ${componentSnapshot.version}"
//     }
// }



// def getFolderNames() {
    
//     // def currentDir = sh(script: 'pwd', returnStdout: true).trim()

//     def folderList = sh(script: "ls -d */ | xargs -n 1 basename", returnStdout: true).trim().split('\n')
//     return folderList
    
// }

// def getSnapshotVersions() {
//     def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"
    
//     def response = httpRequest(url: treeApiUrl, httpMode: 'GET', authentication: 'your_credentials')
//     def fileNames = []
//     if (response.status == 200) {
//         def json = readJSON(text: response.content)
//         fileNames = json.findAll { it.type == 'file' }.collect { it.name }
//     }
//     return fileNames
// }

