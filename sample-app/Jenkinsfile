Map merge(Map... maps) {
    Map result = [:]
    maps.each { map ->
        map.each { k, v ->
            result[k] = result[k] instanceof Map ? merge(result[k], v) : v
        }
    }

    result
}

def findTokenValue(String tokenName, Map tokens) {
    def parts = tokenName.split("\\.")
    def value = tokens
    parts.each { part ->
        value = value[part]
        if (value == null) {
            return null
        }
    }
    value
}

def traverseAndReplaceValues(Map map, Map tokens) {
    map.each { key, value ->
        if (value instanceof String) {
            def matcher = value =~ /\$\{p:([\w\.]+)\}/
            if (matcher) {
                matcher.each { match ->
                    def tokenName = match[1]
                    def tokenValue = findTokenValue(tokenName, tokens)
                    if (tokenValue instanceof String) {
                        value = value.replace("\${p:${tokenName}}", tokenValue)
                    }
                }
            }
        } else if (value instanceof Map) {
            value = traverseAndReplaceValues(value, tokens)
        } else if (value instanceof List) {
            value.eachWithIndex { item, index ->
                if (item instanceof Map) {
                    value[index] = traverseAndReplaceValues(item, tokens)
                } else if (item instanceof String) {
                    def matcher = item =~ /\$\{p:([\w\.]+)\}/
                    if (matcher) {
                        matcher.each { match ->
                            def tokenName = match[1]
                            def tokenValue = findTokenValue(tokenName, tokens)
                            if (tokenValue instanceof String) {
                                value[index] = item.replace("\${p:${tokenName}}", tokenValue)
                            }
                        }
                    }
                }
            }
        }
        map[key] = value
    }
    map
}


def getSnapshotUrl(version) {
    def snapshotUrl = "https://raw.githubusercontent.com/$VERSION_SNAPSHOT_REPO_NAME/$GIT_BRANCH/$VERSION_SNAPSHOT_FOLDER_NAME/$version"
    return snapshotUrl
}

def checkoutEnvConfig() {
    checkout([$class: 'GitSCM',
                branches: [[name: env.BRANCH_NAME]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [],
                submoduleCfg: [],
                userRemoteConfigs: [[url: ENV_CONFIG_GIT_SOURCE]]])
    script {
        env.envFolderNamesString = sh(script: "ls -d */ | xargs -n 1 basename", returnStdout: true).trim()
    }
}

def selectSnapshotAndEnv(closure){
    echo "GIT_BRANCH: ${env.BRANCH_NAME}"
    echo "VERSION_SNAPSHOT_REPO_NAME: $VERSION_SNAPSHOT_REPO_NAME"
    dir('env-config') {
        checkoutEnvConfig()
    }
    def envFolderNames = env.envFolderNamesString.split("\n")
    echo "type: ${envFolderNames.getClass()}"
    echo "envFolderNames: ${envFolderNames}"
    
    def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"

    def response = httpRequest(url: treeApiUrl, httpMode: 'GET')

    def files = []
    if (response.status == 200) {
        def json = readJSON(text: response.content)
        files = json.findAll { it.type == 'file' }.collect { it.name }
    }
    snapshotVersions = files

    def params = input(message: 'Provide the deployment information',
        ok: "Continue",
        parameters: [
            choice(name: 'which_env', choices: Arrays.asList(envFolderNames), description: 'Select the environment'),
            choice(name: 'selected_version_snapshot', choices: snapshotVersions, description: 'Select the snapshot version')
        ]
    )
    if(closure){
        closure()
    }

    env.which_env = params.which_env
    env.selected_version_snapshot = params.selected_version_snapshot
    response = httpRequest(url: getSnapshotUrl(env.selected_version_snapshot))

    if (response.status == 200) {
        env.snapshotContent = response.content
        
    } else {
        error "Failed to retrieve YAML file. HTTP status: ${response.status}"
    }
    echo "which_env=${env.which_env}"
    echo "selected_version_snapshot=${env.selected_version_snapshot}"
}

def preparePropYaml(hostYaml, groups_dir_path, targetComponentName) {
    // Read the Host YAML file
    def mergedYaml = [:] // Initialize the merged YAML object

    // Iterate over the host groups in the same order as mentioned in the Host YAML
    for (group in hostYaml.host_groups) {
        // Read the corresponding Group YAML file
        def groupYaml = readYaml(file: "${groups_dir_path}/${group}.yaml")

        // Merge the 'props' section of the Host YAML with the Group YAML
        mergedYaml = merge(mergedYaml, groupYaml)
    }

    // Merge the 'props' section of the Host YAML
    mergedYaml = merge(mergedYaml, hostYaml.props)

    for (component in hostYaml.host_components) {
        if( component.name == targetComponentName){
            // Merge the 'props' section of the specific 'host_components' YAML with the merged YAML
            mergedYaml = merge(mergedYaml, component.props)
        }
    }


    // Token replace in the Value YAML File
    mergedYaml = traverseAndReplaceValues(mergedYaml, mergedYaml)

    return mergedYaml
}

def prepareComponent(targetComponentName, closure) {
    dir('env-config') {
        checkoutEnvConfig()
        def componentSnapshots = readYaml(text: env.snapshotContent)
        // def targetFolder = sh(script: 'dirname $0', returnStdout: true).trim() + "/${env.which_env}"
        def targetFolder = env.which_env
        sh(script: "ls ${targetFolder}")
        def hostYamlFiles = findFiles(glob: "${targetFolder}/hosts/*.yaml")

        for (def componentSnapshot in componentSnapshots) {
            
            if(targetComponentName == componentSnapshot.name){

                for (def hostYamlFile in hostYamlFiles) {
                    def hostYaml = readYaml(file: hostYamlFile.path)
                    def hostComponentsYaml = hostYaml.host_components
                    
                    for (def componentYaml in hostComponentsYaml) {
                        if (componentYaml.name == targetComponentName) {
                            if(closure){
                                closure(targetComponentName, componentSnapshot, hostYaml, componentYaml, targetFolder)
                            }
                        }
                    }
                }
            }
        }
    }
}

def exportPlatformEnvironmentVariables(componentSnapshot, hostYaml, props){

    return '''export WHICH_ENV=${props.which_env}
            export WHICH_SITE=${props.which_site}
            export APPLICATION_NAME=${props.application_name}
            export HOSTNAME=${hostYaml.hostname}
            export HOME_DIR=${props.home_dir}
            export APP_BINARY_DIR=${props.app_binary_dir}
            export APP_SERVICE_ACCOUNT=${props.app_service_account}
            export APP_SERVICE_ACCOUNT_GROUP=${props.app_service_account_group}
            export KERBEROS_KEYTAB_PATH=${props.kerberos_keytab_path}
            export KERBEROS_TKT_PATH=${props.kerberos_tkt_path}
            export COMPONENT_NAME=${componentSnapshot.name}
            export COMPONENT_VERSION=${componentSnapshot.version}
            export DOWNLOAD_DIR=${props.download_dir}
            export DOWNLOAD_DEPLOY_DIR=${props.download_deploy_dir}
            export DOWNLOAD_COMPONENT_BINARY_DIR=${props.download_dir}/${componentSnapshot.name}
            export DEPLOY_DIR=${props.deploy_dir}
            export COMPONENT_BINARY_DIR=${props.app_binary_dir}/${componentSnapshot.name}
            export COMPONENT_SCRIPTS_DIR=${props.app_binary_dir}/${componentSnapshot.name}/scripts
            export COMPONENT_LOCAL_DATA_DIR=${props.app_binary_dir}/${componentSnapshot.name}/local-data
            export APP_LOG_DIR=${props.app_log_dir}
            # must have a new line here

            '''
}

def downloadComponent( componentName, closure) {
    prepareComponent(componentName) { targetComponentName, componentSnapshot, hostYaml, componentYaml, targetFolder ->
        echo "Download Component '${targetComponentName}'(version=${componentSnapshot.version}) on Host '${hostYaml.hostname}'"
        if(closure){
            closure()
        }
    }
}

def installComponent( componentName, closure) {
    prepareComponent(componentName) { targetComponentName, componentSnapshot, hostYaml, componentYaml, targetFolder ->

        echo "Install Component '${targetComponentName}'(version=${componentSnapshot.version}) on Host '${hostYaml.hostname}'"
        def mergedPropsYaml = preparePropYaml(hostYaml, "${targetFolder}/groups", targetComponentName)
        // // Write the merged YAML to a new file
        
        def yamlFilename = "output/${hostYaml.hostname}/${componentSnapshot.name}/values.yaml"
        writeYaml(file: yamlFilename, data: mergedPropsYaml)
        archiveArtifacts artifacts: yamlFilename

        def exportedValues = exportPlatformEnvironmentVariables(componentSnapshot, hostYaml, mergedPropsYaml) + '\n'
        //call liveness check
        //call install.sh

        withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-agent-for-vm-deployment', keyFileVariable: 'SSH_KEY')]) {
            // SSH into the remote server and execute the bash script

            def remoteCommand = exportedValues + '''
                bash $COMPONENT_SCRIPTS_DIR/liveness-check.sh
            '''
            def sshCommand = "ssh -i $SSH_KEY "${hostYaml.host}" '$remoteCommand'"
            def sshResult = sh script: sshCommand, returnStdout: true, returnStatus: true
            def exitCode = sshResult.returnStatus
             // Check the exit status of the SSH command
            if (exitCode == 0) {
                error "Error executing SSH script. Job will be stopped."
            } else {
                echo "Checked successfully."
            }

            remoteCommand = exportedValues + '''
                bash $DOWNLOAD_DEPLOY_DIR/install.sh
            '''
            sshResult = sh script: sshCommand, returnStdout: true, returnStatus: true
            exitCode = sshResult.returnStatus
             // Check the exit status of the SSH command
            if (exitCode == 0) {
                echo "SSH script executed successfully."
            } else {
                error "Error executing SSH script. Job will be stopped."
            }

            if(closure){
                def commandExecutor = { cmd, outputToFilename ->
                    
                    def sshResultExecutor = sshScript remote: "${hostYaml.host}", script: exportedValues  + cmd
                    
                    // Check the exit status of the SSH command
                    if (sshResultExecutor == 0) {
                        echo "SSH script executed successfully."
                    } else {
                        error "Error executing SSH script. Job will be stopped."
                    }
                    def stdout = sshResultExecutor.out.trim()
                    def outFilename = "output/${hostYaml.hostname}/${componentSnapshot.name}/$outputToFilename"
                    writeFile file: outFilename, text: stdout
                    archiveArtifacts artifacts: outFilename
                
                }
                
                closure(commandExecutor)

            }
            
        }

        

    }
}

def dbPatch( componentName, closure) {
    prepareComponent(componentName) { targetComponentName, componentSnapshot, hostYaml, componentYaml, targetFolder ->

        echo "DB Patch '${targetComponentName}'on Host '${hostYaml.hostname}'"

        if(closure){
            closure()
        }
    }
}

def stopComponent( componentName, closure) {
    prepareComponent(componentName) { targetComponentName, componentSnapshot, hostYaml, componentYaml, targetFolder ->

        echo "Stop Component '${targetComponentName}'on Host '${hostYaml.hostname}'"

        if(closure){
            closure()
        }
    }
}

def startComponent( componentName, closure) {
    prepareComponent(componentName) { targetComponentName, componentSnapshot, hostYaml, componentYaml, targetFolder ->

        echo "Start Component '${targetComponentName}'on Host '${hostYaml.hostname}'"

        if(closure){
            closure()
        }
    }
}

def healthCheckComponent( componentName, closure) {
    prepareComponent(componentName) { targetComponentName, componentSnapshot, hostYaml, componentYaml, targetFolder ->

        echo "Health Check '${targetComponentName}'on Host '${hostYaml.hostname}'"

        if(closure){
            closure()
        }
    }
}

pipeline {
    agent any

    environment { 
        VERSION_SNAPSHOT_REPO_NAME = "thfai2000/version_snapshots"
        VERSION_SNAPSHOT_FOLDER_NAME = "sample-app"
        ENV_CONFIG_GIT_SOURCE = 'https://github.com/thfai2000/sample-app-configuration.git'
    }

    stages {

        stage('Select Snapshot and Environment') {
            steps {
                selectSnapshotAndEnv {
                }
            }
        }
        stage('Download Artifacts') {
            parallel {
                stage('deploy') {
                    steps {
                        downloadComponent("deploy") {
                        }
                    }
                }
                stage('web1') {
                    steps {
                        downloadComponent("web1") {
                        }
                    }
                }
                stage('web2') {
                    steps {
                        downloadComponent("web2") {
                        }
                    }
                }
                stage('web3') {
                    steps {
                        downloadComponent("web3") {
                        }
                    }
                }
                   
            }
        }
        
        stage('Stop & Install Components') {
            parallel {
                stage ("web1") {
                    stages {
                        stage('stop') {
                            steps {
                                stopComponent("web1") {
                                    echo "completed stop web1"
                                }
                            }
                        }
                        stage('install') {
                            steps {
                                installComponent("web1") { cmd ->
                                    echo "completed install web1"
                                    script {
                                        cmd('cat $COMPONENT_BINARY_DIR/config/application.yaml', "application.yaml")
                                    }
                                }
                            }
                        }
                    }
                }
                stage ("web2") {
                    stages {
                        stage('stop') {
                            steps {
                                stopComponent("web2") {
                                    echo "completed stop web2"
                                }
                            }
                        }
                        stage('install') {
                            steps {
                                installComponent("web2") {
                                    echo "completed install web2"
                                }
                            
                            }
                        }
                    }
                }
                stage ("web3") {
                    stages {
                        stage('stop') {
                            steps {
                                stopComponent("web3") {
                                    echo "completed stop web3"
                                }
                            }
                        }
                        stage('install') {
                            steps {
                                installComponent("web3") {
                                    echo "completed install web3"
                                }
                            
                            }
                        }
                        stage('db patch') {
                            steps {
                                dbPatch("web3") {
                                    echo "completed dbPatch"
                                }
                            }
                        }
                    }
                }
            }
            
        }

        stage('Start Components') {
            parallel {
                stage('web1') {
                    steps {
                        startComponent("web1") {
                        }
                    }
                }
                stage('web2') {
                    steps {
                        startComponent("web2") {
                        }
                    }
                }
                stage('web3') {
                    steps {
                        startComponent("web3") {
                        }
                    }
                }
            }
        }

        stage('Health Check Components') {
            parallel {
                stage('web1') {
                    steps {
                        healthCheckComponent("web1") {
                        }
                    }
                }
                stage('web2') {
                    steps {
                        healthCheckComponent("web2") {
                        }
                    }
                }
                stage('web3') {
                    steps {
                        healthCheckComponent("web3") {
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo "completed."
        }
    }
}




// def processComponentOnMachine(componentName, componentSnapshot, hostYaml, componentYaml) {

//     return {
//         echo "Host: ${hostYaml.hostname}"                        
//         echo "processComponentOnMachine: ${componentName}"
//         echo "download version ${componentSnapshot.version}"
//     }
// }



// def getFolderNames() {
    
//     // def currentDir = sh(script: 'pwd', returnStdout: true).trim()

//     def folderList = sh(script: "ls -d */ | xargs -n 1 basename", returnStdout: true).trim().split('\n')
//     return folderList
    
// }

// def getSnapshotVersions() {
//     def treeApiUrl = "https://api.github.com/repos/$VERSION_SNAPSHOT_REPO_NAME/contents/$VERSION_SNAPSHOT_FOLDER_NAME?ref=$GIT_BRANCH"
    
//     def response = httpRequest(url: treeApiUrl, httpMode: 'GET', authentication: 'your_credentials')
//     def fileNames = []
//     if (response.status == 200) {
//         def json = readJSON(text: response.content)
//         fileNames = json.findAll { it.type == 'file' }.collect { it.name }
//     }
//     return fileNames
// }

